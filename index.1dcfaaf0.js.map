{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nvar $a5fd07fa01589658$exports = {};\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.isGameOver = false;\n        this.score = 0;\n        this.hasMovedOnce = false;\n    }\n    moveLeft() {\n        if (this.isGameOver) return;\n        const prevState = this.getState();\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.querySelectorAll(\"tr\");\n        rows.forEach((row)=>{\n            const cells = Array.from(row.querySelectorAll(\"td\"));\n            this.processLine(cells);\n        });\n        this.afterMoveActions(prevState);\n        return this.score;\n    }\n    moveRight() {\n        if (this.isGameOver) return;\n        const prevState = this.getState();\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.querySelectorAll(\"tr\");\n        rows.forEach((row)=>{\n            let cells = Array.from(row.querySelectorAll(\"td\"));\n            cells = cells.reverse();\n            this.processLine(cells);\n        });\n        this.afterMoveActions(prevState);\n        return this.score;\n    }\n    moveUp() {\n        if (this.isGameOver) return;\n        const prevState = this.getState();\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.querySelectorAll(\"tr\");\n        const colsNum = rows[0].querySelectorAll(\"td\").length;\n        for(let col = 0; col < colsNum; col++){\n            const cells = [];\n            rows.forEach((row)=>{\n                cells.push(row.querySelectorAll(\"td\")[col]);\n            });\n            this.processLine(cells);\n        }\n        this.afterMoveActions(prevState);\n        return this.score;\n    }\n    moveDown() {\n        if (this.isGameOver) return;\n        const prevState = this.getState();\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.querySelectorAll(\"tr\");\n        const colsNum = rows[0].querySelectorAll(\"td\").length;\n        for(let col = 0; col < colsNum; col++){\n            const cells = [];\n            rows.forEach((row)=>{\n                cells.push(row.querySelectorAll(\"td\")[col]);\n            });\n            cells.reverse();\n            this.processLine(cells);\n        }\n        this.afterMoveActions(prevState);\n        return this.score;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const score = document.querySelector(\".game-score\");\n        score.textContent = this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        const state = [];\n        const rows = document.querySelectorAll(\"tbody tr\");\n        rows.forEach((row)=>{\n            const rowState = [];\n            const cells = row.querySelectorAll(\"td\");\n            cells.forEach((cell)=>{\n                const value = parseInt(cell.textContent.trim());\n                rowState.push(isNaN(value) ? 0 : value);\n            });\n            state.push(rowState);\n        });\n        return state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        const state = this.getState();\n        const hasEmpty = state.some((row)=>row.includes(0));\n        const isWin = state.some((row)=>row.includes(2048));\n        if (!hasEmpty && !this.canMerge(state)) {\n            this.isGameOver = true;\n            const lose = document.querySelector(\".message-lose\");\n            lose.classList.remove(\"hidden\");\n            return \"lose\";\n        }\n        if (isWin) {\n            this.isGameOver = true;\n            const win = document.querySelector(\".message-win\");\n            win.classList.remove(\"hidden\");\n            return \"win\";\n        }\n        return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.isGameOver = false;\n        const message = document.querySelector(\".message-start\");\n        message.classList.add(\"hidden\");\n        let count = 0;\n        const values = this.getState();\n        values.forEach((row)=>{\n            row.forEach((cell)=>{\n                if (cell !== 0) count++;\n            });\n        });\n        for(let i = 0; i < 2 - count; i++)this.generateCube();\n        this.getScore();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.isGameOver = false;\n        this.hasMovedOnce = false;\n        const mainButton = document.querySelector(\".button\");\n        mainButton.classList.remove(\"restart\");\n        mainButton.classList.add(\"start\");\n        mainButton.textContent = \"Start\";\n        const message = document.querySelector(\".message-start\");\n        message.classList.remove(\"hidden\");\n        const messageLose = document.querySelector(\".message-lose\");\n        messageLose.classList.add(\"hidden\");\n        const messageWin = document.querySelector(\".message-win\");\n        messageWin.classList.add(\"hidden\");\n        this.score = 0;\n        const rows = document.querySelectorAll(\"tbody tr\");\n        rows.forEach((row)=>{\n            row.querySelectorAll(\"td\").forEach((col)=>{\n                col.textContent = \"\";\n                col.classList.forEach((className)=>{\n                    if (className.startsWith(\"field-cell--\")) col.classList.remove(className);\n                });\n            });\n        });\n        this.getScore();\n    }\n    extractValues(cells) {\n        const values = [];\n        cells.forEach((cell)=>{\n            const value = cell.textContent.trim();\n            if (value !== \"\") values.push(value);\n        });\n        return values;\n    }\n    updateCells(cells, values) {\n        cells.forEach((cell, i)=>{\n            cell.classList.forEach((className)=>{\n                if (className.startsWith(\"field-cell--\")) cell.classList.remove(className);\n            });\n            if (values[i]) {\n                cell.classList.add(`field-cell--${values[i]}`);\n                cell.textContent = values[i];\n            } else cell.textContent = \"\";\n        });\n    }\n    processLine(cells) {\n        const values = this.extractValues(cells);\n        this.mergeCubes(values);\n        this.updateCells(cells, values);\n    }\n    afterMoveActions(prevState) {\n        const newState = this.getState();\n        const hasChanged = this.areStatesEqual(prevState, newState);\n        if (!hasChanged) {\n            this.generateCube();\n            this.getStatus();\n            this.markFirstMove();\n        }\n    }\n    mergeCubes(values) {\n        for(let i = 0; i < values.length; i++)if (values[i] === values[i + 1]) {\n            values[i] *= 2;\n            this.score += values[i];\n            values.splice(i + 1, 1);\n        }\n        return values;\n    }\n    generateCube() {\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.querySelectorAll(\"tr\");\n        const randomRowIndex = Math.floor(Math.random() * rows.length);\n        const randomRow = rows[randomRowIndex];\n        const columns = randomRow.querySelectorAll(\"td\");\n        const randomColumnIndex = Math.floor(Math.random() * columns.length);\n        const randomColumn = columns[randomColumnIndex];\n        if (randomColumn.textContent.trim() !== \"\") {\n            this.generateCube();\n            return;\n        }\n        const value = Math.random() < 0.9 ? 2 : 4;\n        randomColumn.classList.add(`field-cell--${value}`);\n        randomColumn.textContent = value;\n    }\n    canMerge(state) {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = state[row][col];\n            if (col < 3 && current === state[row][col + 1]) return true;\n            if (row < 3 && current === state[row + 1][col]) return true;\n        }\n        return false;\n    }\n    areStatesEqual(state1, state2) {\n        for(let row = 0; row < state1.length; row++)for(let col = 0; col < state1[row].length; col++){\n            if (state1[row][col] !== state2[row][col]) return false;\n        }\n        return true;\n    }\n    markFirstMove() {\n        if (!this.hasMovedOnce) {\n            const mainButton = document.querySelector(\".button\");\n            mainButton.classList.remove(\"start\");\n            mainButton.classList.add(\"restart\");\n            mainButton.textContent = \"Restart\";\n            this.hasMovedOnce = true;\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$mainButton = document.querySelector(\".button\");\n$09e991522ca7e64e$var$mainButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$mainButton.classList.contains(\"start\")) $09e991522ca7e64e$var$game.start();\n    else if ($09e991522ca7e64e$var$mainButton.classList.contains(\"restart\")) $09e991522ca7e64e$var$game.restart();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$game.getScore();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$game.getScore();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$game.getScore();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$game.getScore();\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.1dcfaaf0.js.map\n","\nimport '../styles/main.scss';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst mainButton = document.querySelector('.button');\n\nmainButton.addEventListener('click', () => {\n  if (mainButton.classList.contains('start')) {\n    game.start();\n  } else if (mainButton.classList.contains('restart')) {\n    game.restart();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      game.getScore();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      game.getScore();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      game.getScore();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      game.getScore();\n      break;\n  }\n});\n","\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n    this.isGameOver = false;\n    this.score = 0;\n    this.hasMovedOnce = false;\n  }\n\n  moveLeft() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    rows.forEach((row) => {\n      const cells = Array.from(row.querySelectorAll('td'));\n\n      this.processLine(cells);\n    });\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  moveRight() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    rows.forEach((row) => {\n      let cells = Array.from(row.querySelectorAll('td'));\n\n      cells = cells.reverse();\n      this.processLine(cells);\n    });\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  moveUp() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n    const colsNum = rows[0].querySelectorAll('td').length;\n\n    for (let col = 0; col < colsNum; col++) {\n      const cells = [];\n\n      rows.forEach((row) => {\n        cells.push(row.querySelectorAll('td')[col]);\n      });\n      this.processLine(cells);\n    }\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  moveDown() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n    const colsNum = rows[0].querySelectorAll('td').length;\n\n    for (let col = 0; col < colsNum; col++) {\n      const cells = [];\n\n      rows.forEach((row) => {\n        cells.push(row.querySelectorAll('td')[col]);\n      });\n      cells.reverse();\n      this.processLine(cells);\n    }\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const score = document.querySelector('.game-score');\n\n    score.textContent = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const state = [];\n    const rows = document.querySelectorAll('tbody tr');\n\n    rows.forEach((row) => {\n      const rowState = [];\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell) => {\n        const value = parseInt(cell.textContent.trim());\n\n        rowState.push(isNaN(value) ? 0 : value);\n      });\n\n      state.push(rowState);\n    });\n\n    return state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const state = this.getState();\n\n    const hasEmpty = state.some((row) => row.includes(0));\n\n    const isWin = state.some((row) => row.includes(2048));\n\n    if (!hasEmpty && !this.canMerge(state)) {\n      this.isGameOver = true;\n\n      const lose = document.querySelector('.message-lose');\n\n      lose.classList.remove('hidden');\n\n      return 'lose';\n    }\n\n    if (isWin) {\n      this.isGameOver = true;\n\n      const win = document.querySelector('.message-win');\n\n      win.classList.remove('hidden');\n\n      return 'win';\n    }\n\n    return 'playing';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.isGameOver = false;\n\n    const message = document.querySelector('.message-start');\n\n    message.classList.add('hidden');\n\n    let count = 0;\n    const values = this.getState();\n\n    values.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell !== 0) {\n          count++;\n        }\n      });\n    });\n\n    for (let i = 0; i < 2 - count; i++) {\n      this.generateCube();\n    }\n\n    this.getScore();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.isGameOver = false;\n    this.hasMovedOnce = false;\n\n    const mainButton = document.querySelector('.button');\n\n    mainButton.classList.remove('restart');\n    mainButton.classList.add('start');\n\n    mainButton.textContent = 'Start';\n\n    const message = document.querySelector('.message-start');\n\n    message.classList.remove('hidden');\n\n    const messageLose = document.querySelector('.message-lose');\n\n    messageLose.classList.add('hidden');\n\n    const messageWin = document.querySelector('.message-win');\n\n    messageWin.classList.add('hidden');\n\n    this.score = 0;\n\n    const rows = document.querySelectorAll('tbody tr');\n\n    rows.forEach((row) => {\n      row.querySelectorAll('td').forEach((col) => {\n        col.textContent = '';\n\n        col.classList.forEach((className) => {\n          if (className.startsWith('field-cell--')) {\n            col.classList.remove(className);\n          }\n        });\n      });\n    });\n\n    this.getScore();\n  }\n\n  extractValues(cells) {\n    const values = [];\n\n    cells.forEach((cell) => {\n      const value = cell.textContent.trim();\n\n      if (value !== '') {\n        values.push(value);\n      }\n    });\n\n    return values;\n  }\n\n  updateCells(cells, values) {\n    cells.forEach((cell, i) => {\n      cell.classList.forEach((className) => {\n        if (className.startsWith('field-cell--')) {\n          cell.classList.remove(className);\n        }\n      });\n\n      if (values[i]) {\n        cell.classList.add(`field-cell--${values[i]}`);\n        cell.textContent = values[i];\n      } else {\n        cell.textContent = '';\n      }\n    });\n  }\n\n  processLine(cells) {\n    const values = this.extractValues(cells);\n\n    this.mergeCubes(values);\n    this.updateCells(cells, values);\n  }\n\n  afterMoveActions(prevState) {\n    const newState = this.getState();\n    const hasChanged = this.areStatesEqual(prevState, newState);\n\n    if (!hasChanged) {\n      this.generateCube();\n      this.getStatus();\n      this.markFirstMove();\n    }\n  }\n\n  mergeCubes(values) {\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] === values[i + 1]) {\n        values[i] *= 2;\n        this.score += values[i];\n        values.splice(i + 1, 1);\n      }\n    }\n\n    return values;\n  }\n\n  generateCube() {\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    const randomRowIndex = Math.floor(Math.random() * rows.length);\n    const randomRow = rows[randomRowIndex];\n\n    const columns = randomRow.querySelectorAll('td');\n\n    const randomColumnIndex = Math.floor(Math.random() * columns.length);\n    const randomColumn = columns[randomColumnIndex];\n\n    if (randomColumn.textContent.trim() !== '') {\n      this.generateCube();\n\n      return;\n    }\n\n    const value = Math.random() < 0.9 ? 2 : 4;\n\n    randomColumn.classList.add(`field-cell--${value}`);\n    randomColumn.textContent = value;\n  }\n\n  canMerge(state) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = state[row][col];\n\n        if (col < 3 && current === state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < state1.length; row++) {\n      for (let col = 0; col < state1[row].length; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  markFirstMove() {\n    if (!this.hasMovedOnce) {\n      const mainButton = document.querySelector('.button');\n\n      mainButton.classList.remove('start');\n      mainButton.classList.add('restart');\n\n      mainButton.textContent = 'Restart';\n      this.hasMovedOnce = true;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$09e991522ca7e64e$var$game","constructor","initialState","console","log","isGameOver","score","hasMovedOnce","moveLeft","prevState","getState","rows","tbody","document","querySelector","querySelectorAll","forEach","row","cells","Array","from","processLine","afterMoveActions","moveRight","reverse","moveUp","colsNum","length","col","push","moveDown","getScore","textContent","state","rowState","cell","value","parseInt","trim","isNaN","getStatus","hasEmpty","some","includes","isWin","canMerge","win","classList","remove","lose","start","message","add","count","values","i","generateCube","restart","mainButton","messageLose","messageWin","className","startsWith","extractValues","updateCells","mergeCubes","newState","areStatesEqual","markFirstMove","splice","randomRowIndex","Math","floor","random","columns","randomRow","randomColumnIndex","randomColumn","current","state1","state2","__esModule","default","$09e991522ca7e64e$var$mainButton","addEventListener","contains","e","key"],"version":3,"file":"index.1dcfaaf0.js.map"}