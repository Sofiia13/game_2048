{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nvar $3d28d7f1aac198f5$exports = {};\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.isGameOver = false;\n        this.score = 0;\n        this.hasMovedOnce = false;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                if (this.isGameOver) return;\n                var prevState = this.getState();\n                var tbody = document.querySelector(\"tbody\");\n                var rows = tbody.querySelectorAll(\"tr\");\n                rows.forEach(function(row) {\n                    var cells = Array.from(row.querySelectorAll(\"td\"));\n                    _this.processLine(cells);\n                });\n                this.afterMoveActions(prevState);\n                return this.score;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (this.isGameOver) return;\n                var prevState = this.getState();\n                var tbody = document.querySelector(\"tbody\");\n                var rows = tbody.querySelectorAll(\"tr\");\n                rows.forEach(function(row) {\n                    var cells = Array.from(row.querySelectorAll(\"td\"));\n                    cells = cells.reverse();\n                    _this.processLine(cells);\n                });\n                this.afterMoveActions(prevState);\n                return this.score;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var cells = [];\n                    rows.forEach(function(row) {\n                        cells.push(row.querySelectorAll(\"td\")[col]);\n                    });\n                    _this.processLine(cells);\n                };\n                if (this.isGameOver) return;\n                var prevState = this.getState();\n                var tbody = document.querySelector(\"tbody\");\n                var rows = tbody.querySelectorAll(\"tr\");\n                var colsNum = rows[0].querySelectorAll(\"td\").length;\n                for(var col = 0; col < colsNum; col++)_loop(col);\n                this.afterMoveActions(prevState);\n                return this.score;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var cells = [];\n                    rows.forEach(function(row) {\n                        cells.push(row.querySelectorAll(\"td\")[col]);\n                    });\n                    cells.reverse();\n                    _this.processLine(cells);\n                };\n                if (this.isGameOver) return;\n                var prevState = this.getState();\n                var tbody = document.querySelector(\"tbody\");\n                var rows = tbody.querySelectorAll(\"tr\");\n                var colsNum = rows[0].querySelectorAll(\"td\").length;\n                for(var col = 0; col < colsNum; col++)_loop(col);\n                this.afterMoveActions(prevState);\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var score = document.querySelector(\".game-score\");\n                score.textContent = this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                var state = [];\n                var rows = document.querySelectorAll(\"tbody tr\");\n                rows.forEach(function(row) {\n                    var rowState = [];\n                    var cells = row.querySelectorAll(\"td\");\n                    cells.forEach(function(cell) {\n                        var value = parseInt(cell.textContent.trim());\n                        rowState.push(isNaN(value) ? 0 : value);\n                    });\n                    state.push(rowState);\n                });\n                return state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var state = this.getState();\n                var hasEmpty = state.some(function(row) {\n                    return row.includes(0);\n                });\n                var isWin = state.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (!hasEmpty && !this.canMerge(state)) {\n                    this.isGameOver = true;\n                    var lose = document.querySelector(\".message-lose\");\n                    lose.classList.remove(\"hidden\");\n                    return \"lose\";\n                }\n                if (isWin) {\n                    this.isGameOver = true;\n                    var win = document.querySelector(\".message-win\");\n                    win.classList.remove(\"hidden\");\n                    return \"win\";\n                }\n                return \"playing\";\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.isGameOver = false;\n                var message = document.querySelector(\".message-start\");\n                message.classList.add(\"hidden\");\n                var count = 0;\n                var values = this.getState();\n                values.forEach(function(row) {\n                    row.forEach(function(cell) {\n                        if (cell !== 0) count++;\n                    });\n                });\n                for(var i = 0; i < 2 - count; i++)this.generateCube();\n                this.getScore();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.isGameOver = false;\n                this.hasMovedOnce = false;\n                var mainButton = document.querySelector(\".button\");\n                mainButton.classList.remove(\"restart\");\n                mainButton.classList.add(\"start\");\n                mainButton.textContent = \"Start\";\n                var message = document.querySelector(\".message-start\");\n                message.classList.remove(\"hidden\");\n                var messageLose = document.querySelector(\".message-lose\");\n                messageLose.classList.add(\"hidden\");\n                var messageWin = document.querySelector(\".message-win\");\n                messageWin.classList.add(\"hidden\");\n                this.score = 0;\n                var rows = document.querySelectorAll(\"tbody tr\");\n                rows.forEach(function(row) {\n                    row.querySelectorAll(\"td\").forEach(function(col) {\n                        col.textContent = \"\";\n                        col.classList.forEach(function(className) {\n                            if (className.startsWith(\"field-cell--\")) col.classList.remove(className);\n                        });\n                    });\n                });\n                this.getScore();\n            }\n        },\n        {\n            key: \"extractValues\",\n            value: function extractValues(cells) {\n                var values = [];\n                cells.forEach(function(cell) {\n                    var value = cell.textContent.trim();\n                    if (value !== \"\") values.push(value);\n                });\n                return values;\n            }\n        },\n        {\n            key: \"updateCells\",\n            value: function updateCells(cells, values) {\n                cells.forEach(function(cell, i) {\n                    cell.classList.forEach(function(className) {\n                        if (className.startsWith(\"field-cell--\")) cell.classList.remove(className);\n                    });\n                    if (values[i]) {\n                        cell.classList.add(\"field-cell--\".concat(values[i]));\n                        cell.textContent = values[i];\n                    } else cell.textContent = \"\";\n                });\n            }\n        },\n        {\n            key: \"processLine\",\n            value: function processLine(cells) {\n                var values = this.extractValues(cells);\n                this.mergeCubes(values);\n                this.updateCells(cells, values);\n            }\n        },\n        {\n            key: \"afterMoveActions\",\n            value: function afterMoveActions(prevState) {\n                var newState = this.getState();\n                var hasChanged = this.areStatesEqual(prevState, newState);\n                if (!hasChanged) {\n                    this.generateCube();\n                    this.getStatus();\n                    this.markFirstMove();\n                }\n            }\n        },\n        {\n            key: \"mergeCubes\",\n            value: function mergeCubes(values) {\n                for(var i = 0; i < values.length; i++)if (values[i] === values[i + 1]) {\n                    values[i] *= 2;\n                    this.score += values[i];\n                    values.splice(i + 1, 1);\n                }\n                return values;\n            }\n        },\n        {\n            key: \"generateCube\",\n            value: function generateCube() {\n                var tbody = document.querySelector(\"tbody\");\n                var rows = tbody.querySelectorAll(\"tr\");\n                var randomRowIndex = Math.floor(Math.random() * rows.length);\n                var randomRow = rows[randomRowIndex];\n                var columns = randomRow.querySelectorAll(\"td\");\n                var randomColumnIndex = Math.floor(Math.random() * columns.length);\n                var randomColumn = columns[randomColumnIndex];\n                if (randomColumn.textContent.trim() !== \"\") {\n                    this.generateCube();\n                    return;\n                }\n                var value = Math.random() < 0.9 ? 2 : 4;\n                randomColumn.classList.add(\"field-cell--\".concat(value));\n                randomColumn.textContent = value;\n            }\n        },\n        {\n            key: \"canMerge\",\n            value: function canMerge(state) {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var current = state[row][col];\n                    if (col < 3 && current === state[row][col + 1]) return true;\n                    if (row < 3 && current === state[row + 1][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"areStatesEqual\",\n            value: function areStatesEqual(state1, state2) {\n                for(var row = 0; row < state1.length; row++)for(var col = 0; col < state1[row].length; col++){\n                    if (state1[row][col] !== state2[row][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"markFirstMove\",\n            value: function markFirstMove() {\n                if (!this.hasMovedOnce) {\n                    var mainButton = document.querySelector(\".button\");\n                    mainButton.classList.remove(\"start\");\n                    mainButton.classList.add(\"restart\");\n                    mainButton.textContent = \"Restart\";\n                    this.hasMovedOnce = true;\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nvar $197cd56b15c33885$var$mainButton = document.querySelector(\".button\");\n$197cd56b15c33885$var$mainButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$mainButton.classList.contains(\"start\")) $197cd56b15c33885$var$game.start();\n    else if ($197cd56b15c33885$var$mainButton.classList.contains(\"restart\")) $197cd56b15c33885$var$game.restart();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            $197cd56b15c33885$var$game.getScore();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            $197cd56b15c33885$var$game.getScore();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            $197cd56b15c33885$var$game.getScore();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            $197cd56b15c33885$var$game.getScore();\n            break;\n    }\n});\n\n})();\n//# sourceMappingURL=index.08f9bb90.js.map\n","\nimport '../styles/main.scss';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst mainButton = document.querySelector('.button');\n\nmainButton.addEventListener('click', () => {\n  if (mainButton.classList.contains('start')) {\n    game.start();\n  } else if (mainButton.classList.contains('restart')) {\n    game.restart();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      game.getScore();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      game.getScore();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      game.getScore();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      game.getScore();\n      break;\n  }\n});\n","\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n    this.isGameOver = false;\n    this.score = 0;\n    this.hasMovedOnce = false;\n  }\n\n  moveLeft() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    rows.forEach((row) => {\n      const cells = Array.from(row.querySelectorAll('td'));\n\n      this.processLine(cells);\n    });\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  moveRight() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    rows.forEach((row) => {\n      let cells = Array.from(row.querySelectorAll('td'));\n\n      cells = cells.reverse();\n      this.processLine(cells);\n    });\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  moveUp() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n    const colsNum = rows[0].querySelectorAll('td').length;\n\n    for (let col = 0; col < colsNum; col++) {\n      const cells = [];\n\n      rows.forEach((row) => {\n        cells.push(row.querySelectorAll('td')[col]);\n      });\n      this.processLine(cells);\n    }\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  moveDown() {\n    if (this.isGameOver) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n    const colsNum = rows[0].querySelectorAll('td').length;\n\n    for (let col = 0; col < colsNum; col++) {\n      const cells = [];\n\n      rows.forEach((row) => {\n        cells.push(row.querySelectorAll('td')[col]);\n      });\n      cells.reverse();\n      this.processLine(cells);\n    }\n\n    this.afterMoveActions(prevState);\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const score = document.querySelector('.game-score');\n\n    score.textContent = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const state = [];\n    const rows = document.querySelectorAll('tbody tr');\n\n    rows.forEach((row) => {\n      const rowState = [];\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell) => {\n        const value = parseInt(cell.textContent.trim());\n\n        rowState.push(isNaN(value) ? 0 : value);\n      });\n\n      state.push(rowState);\n    });\n\n    return state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const state = this.getState();\n\n    const hasEmpty = state.some((row) => row.includes(0));\n\n    const isWin = state.some((row) => row.includes(2048));\n\n    if (!hasEmpty && !this.canMerge(state)) {\n      this.isGameOver = true;\n\n      const lose = document.querySelector('.message-lose');\n\n      lose.classList.remove('hidden');\n\n      return 'lose';\n    }\n\n    if (isWin) {\n      this.isGameOver = true;\n\n      const win = document.querySelector('.message-win');\n\n      win.classList.remove('hidden');\n\n      return 'win';\n    }\n\n    return 'playing';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.isGameOver = false;\n\n    const message = document.querySelector('.message-start');\n\n    message.classList.add('hidden');\n\n    let count = 0;\n    const values = this.getState();\n\n    values.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell !== 0) {\n          count++;\n        }\n      });\n    });\n\n    for (let i = 0; i < 2 - count; i++) {\n      this.generateCube();\n    }\n\n    this.getScore();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.isGameOver = false;\n    this.hasMovedOnce = false;\n\n    const mainButton = document.querySelector('.button');\n\n    mainButton.classList.remove('restart');\n    mainButton.classList.add('start');\n\n    mainButton.textContent = 'Start';\n\n    const message = document.querySelector('.message-start');\n\n    message.classList.remove('hidden');\n\n    const messageLose = document.querySelector('.message-lose');\n\n    messageLose.classList.add('hidden');\n\n    const messageWin = document.querySelector('.message-win');\n\n    messageWin.classList.add('hidden');\n\n    this.score = 0;\n\n    const rows = document.querySelectorAll('tbody tr');\n\n    rows.forEach((row) => {\n      row.querySelectorAll('td').forEach((col) => {\n        col.textContent = '';\n\n        col.classList.forEach((className) => {\n          if (className.startsWith('field-cell--')) {\n            col.classList.remove(className);\n          }\n        });\n      });\n    });\n\n    this.getScore();\n  }\n\n  extractValues(cells) {\n    const values = [];\n\n    cells.forEach((cell) => {\n      const value = cell.textContent.trim();\n\n      if (value !== '') {\n        values.push(value);\n      }\n    });\n\n    return values;\n  }\n\n  updateCells(cells, values) {\n    cells.forEach((cell, i) => {\n      cell.classList.forEach((className) => {\n        if (className.startsWith('field-cell--')) {\n          cell.classList.remove(className);\n        }\n      });\n\n      if (values[i]) {\n        cell.classList.add(`field-cell--${values[i]}`);\n        cell.textContent = values[i];\n      } else {\n        cell.textContent = '';\n      }\n    });\n  }\n\n  processLine(cells) {\n    const values = this.extractValues(cells);\n\n    this.mergeCubes(values);\n    this.updateCells(cells, values);\n  }\n\n  afterMoveActions(prevState) {\n    const newState = this.getState();\n    const hasChanged = this.areStatesEqual(prevState, newState);\n\n    if (!hasChanged) {\n      this.generateCube();\n      this.getStatus();\n      this.markFirstMove();\n    }\n  }\n\n  mergeCubes(values) {\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] === values[i + 1]) {\n        values[i] *= 2;\n        this.score += values[i];\n        values.splice(i + 1, 1);\n      }\n    }\n\n    return values;\n  }\n\n  generateCube() {\n    const tbody = document.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    const randomRowIndex = Math.floor(Math.random() * rows.length);\n    const randomRow = rows[randomRowIndex];\n\n    const columns = randomRow.querySelectorAll('td');\n\n    const randomColumnIndex = Math.floor(Math.random() * columns.length);\n    const randomColumn = columns[randomColumnIndex];\n\n    if (randomColumn.textContent.trim() !== '') {\n      this.generateCube();\n\n      return;\n    }\n\n    const value = Math.random() < 0.9 ? 2 : 4;\n\n    randomColumn.classList.add(`field-cell--${value}`);\n    randomColumn.textContent = value;\n  }\n\n  canMerge(state) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = state[row][col];\n\n        if (col < 3 && current === state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < state1.length; row++) {\n      for (let col = 0; col < state1[row].length; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  markFirstMove() {\n    if (!this.hasMovedOnce) {\n      const mainButton = document.querySelector('.button');\n\n      mainButton.classList.remove('start');\n      mainButton.classList.add('restart');\n\n      mainButton.textContent = 'Restart';\n      this.hasMovedOnce = true;\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["a","$197cd56b15c33885$var$game","$197cd56b15c33885$var$mainButton","protoProps","Game","initialState","instance","Constructor","TypeError","console","log","isGameOver","score","hasMovedOnce","key","value","_this","prevState","getState","rows","tbody","document","querySelector","querySelectorAll","forEach","row","cells","Array","from","processLine","afterMoveActions","reverse","_loop","col","push","colsNum","length","textContent","state","rowState","cell","parseInt","trim","isNaN","hasEmpty","some","includes","isWin","canMerge","win","classList","remove","lose","message","add","count","values","i","generateCube","getScore","mainButton","messageLose","messageWin","className","startsWith","concat","extractValues","mergeCubes","updateCells","newState","areStatesEqual","getStatus","markFirstMove","splice","randomRowIndex","Math","floor","random","columns","randomRow","randomColumnIndex","randomColumn","current","state1","state2","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","__esModule","default","addEventListener","contains","start","restart","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.08f9bb90.js.map"}